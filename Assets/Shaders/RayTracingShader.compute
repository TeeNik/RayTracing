// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14159265f;

struct Ray
{
    float3 origin;
    float3 dir;
};

Ray CreateRay(float3 origin, float3 dir)
{
    Ray ray;
    ray.origin = origin;
    ray.dir = dir;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 dir = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    dir = mul(_CameraToWorld, float4(dir, 0)).xyz;
    dir = normalize(dir);
    return CreateRay(origin, dir);
}

struct RayHit
{
    float3 pos;
    float dist;
    float3 normal;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.pos = float3(0, 0, 0);
    hit.dist = 1.#INF;
    hit.normal = float3(0, 0, 0);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit hit)
{
    float t = -ray.origin.y / ray.dir.y;
    if (t > 0 && t < hit.dist)
    {
        hit.dist = t;
        hit.pos = ray.origin + t * ray.dir;
        hit.normal = float3(0, 1, 0);
    }
}

void IntersectSphere(Ray ray, inout RayHit hit, float4 sphere)
{
    float3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.dir, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if (p2sqr < 0)
    {
        return;
    }

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < hit.dist)
    {
        hit.dist = t;
        hit.pos = ray.origin + t * ray.dir;
        hit.normal = normalize(hit.pos - sphere.xyz);
    }
}

RayHit Trace(Ray ray)
{
    RayHit hit = CreateRayHit();
    IntersectGroundPlane(ray, hit);
    IntersectSphere(ray, hit, float4(0, 3, 0, 1));
    return hit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.dist < 1.#INF)
	{
        return hit.normal * 0.5 + 0.5;
	}
    else
    {
        float theta = acos(ray.dir.y) / -PI;
        float pi = atan2(ray.dir.x, -ray.dir.z) / -PI * 0.5;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(pi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = float2((id.xy + float2(0.5, 0.5)) / float2(width, height) * 2 - 1);
    Ray ray = CreateCameraRay(uv);

    RayHit hit = Trace(ray);
    float3 result = Shade(ray, hit);
    Result[id.xy] = float4(result, 1);

    //Result[id.xy] = float4(ray.dir * 0.5 + 0.5, 1);
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
